<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>逆向记录（代号aria）</title>
      <link href="/2022/05/07/%E9%80%86%E5%90%91-aria/"/>
      <url>/2022/05/07/%E9%80%86%E5%90%91-aria/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>是新游戏喔~<br>残念，旧的，开服半年了…<br>这次为了逃避一下某高级计算机体系结构测试，简单看看。</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="小背景"><a href="#小背景" class="headerlink" title="小背景"></a>小背景</h2><p>开服时有扫过一眼，感觉麻烦就没动，今天看到有朋友问，就试试好了。<br>卖点大概是全程3D演出罢…印象中是回合制，似乎有些奢侈。<br>我的祖传MI6开最高品质卡得不行了，不过不好证明是优化问题还是硬件问题…</p><h2 id="初探——manifest与URL格式"><a href="#初探——manifest与URL格式" class="headerlink" title="初探——manifest与URL格式"></a>初探——manifest与URL格式</h2><p>manifest的包抓了一下，名字是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.app.*********-aria.com/v11401_14c67a0bd0d3776b19350*********ca49292a2d43127663a3a2427951f731f8/assetbundle/WebGL_Hash/bf892ddb3aa0f7a9e7597e*********f6fe215dc6861328821b763325953c0</span><br></pre></td></tr></table></figure><p>(打个电子码)<br>不得不说有点长，可以猜测v11401那一段是版本号+某个东西的sha256，assetbundle名字也被混淆为某个东西的sha256。分解一下就是<br><code>https://&#123;cdn地址&#125;/&#123;资源版本号相关&#125;/assetbundle/WebGL_hash/&#123;assetbundle的hash&#125;</code>。</p><p>资源版本号相关的可以每次拉取manifest的时候记录一下，就不需要去搞清楚如何计算的了。打开manifest看了一眼，里面记录是正常的asset名字，推测与<a href="../../../../2021/06/04/%E9%80%86%E5%90%91-ayaranbu/">之前某次研究</a>类似，即本地有一个自定义的sha256计算过程，需要走一下逆向。</p><h2 id="初探——角色剧情"><a href="#初探——角色剧情" class="headerlink" title="初探——角色剧情"></a>初探——角色剧情</h2><p>打开角色剧情看一下相关的文件，加载剧情期间下载了2个文件，猜测是剧情scripts、资源文件（包含语音、图片等）。用AssetStudio（后续简称AS）打开报错了——资源可能加密了。AS报错蕴含的信息量很大：因为如果是AES或者其他能破坏掉header的加密方法，AS不会将之视为有效的Unity assets，也就不会走读取流程；说明是使用了Padding或者局部字符替换等不伤害header的操作。</p><p>拖进hex editor一眼看出端倪——多个assetbundle头。<br><img src="/2022/05/07/%E9%80%86%E5%90%91-aria/multiple-headers.png" title="hex"></p><p>删掉第二个header前的部分即可正常读取，是简单的Padding法。但padding size不是定值，测试只下几个不同的assetbundle具有不同的size。经过读取可以得知上述2个文件分别是图片CG包、语音包。</p><p>剧情scripts不在上述文件内，很有可能是服务器下发的，一般而言它包含各种控制、剧情文本、剧情资源文件url。所以这个scripts对我们编写脚本作用最大。而服务器下发意味着经历过通信加密部分，我的话不到迫不得已完全不想碰这一部分，构造请求意味着要把所有需要计算的部分逆向搞清楚<del>也就是嫌麻烦</del>，参考以前写过的<a href="https://gist.github.com/sh0wer1ee/357aab7c091f89c982f1ee8203b4313e">alicerecode的代码</a>…所以先继续前进。</p><p>推进剧情到动态部分时追加下载了两个文件，走的URL格式为<br><code>https://&#123;cdn地址&#125;/&#123;资源版本号相关&#125;/Video/&#123;Video的hash&#125;</code>。不在assetbundle路径下说明没有像之前的某厂商，将mp4作为textasset打包成assetbundle。看了下hex里有ftypisom isomiso2avc1mp41等字样，说明就是raw mp4，真好。</p><h2 id="幕间——整理一下"><a href="#幕间——整理一下" class="headerlink" title="幕间——整理一下"></a>幕间——整理一下</h2><p>目标是提取CG，那么逆向需要弄清楚这些</p><ul><li>静态png：文件类型是assetbundle，如何正确进行读取、如何计算assetbundle的hash</li><li>动态mp4：文件类型是mp4，如何计算video的hash</li></ul><h2 id="正式研究——dumper-amp-IDA"><a href="#正式研究——dumper-amp-IDA" class="headerlink" title="正式研究——dumper &amp; IDA"></a>正式研究——dumper &amp; IDA</h2><p>首先寻找hash部分，在dump.cs里查找hash关键词，翻到最后可以看到</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Namespace: GeePlus.GPUL.AssetBundles</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AssetBundleUtils</span> <span class="comment">// TypeDefIndex: 13587</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Properties</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">byte</span>[] <span class="title">ComputeHash</span>(<span class="params"><span class="built_in">byte</span>[] buffer</span>)</span> &#123; &#125; <span class="comment">// RVA: 0xDCBED8 Offset: 0xDCBED8 VA: 0xDCBED8</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetHashName</span>(<span class="params"><span class="built_in">string</span> assetBundleName, Hash128 assetBundleHash</span>)</span> &#123; &#125; <span class="comment">// RVA: 0xDC8630 Offset: 0xDC8630 VA: 0xDC8630</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetPaddingSize</span>(<span class="params"><span class="built_in">string</span> assetBundleName, Hash128 assetBundleHash</span>)</span> &#123; &#125; <span class="comment">// RVA: 0xDC87FC Offset: 0xDC87FC VA: 0xDC87FC</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> .ctor() &#123; &#125; <span class="comment">// RVA: 0xDCC044 Offset: 0xDCC044 VA: 0xDCC044</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结合命名空间，GetHashName应该是assetbundle的hash计算过程，GetPaddingSize就是开头填充的长度了。</p><p>video的话应该是这里</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Namespace: </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">ResourceHashMapper</span> <span class="comment">// TypeDefIndex: 8882</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// Properties</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> VideoHashFormat &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetVideoHashName</span>(<span class="params"><span class="built_in">string</span> videoPath</span>)</span> &#123; &#125; <span class="comment">// RVA: 0x1046DBC Offset: 0x1046DBC VA: 0x1046DBC</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">GetHashName</span>(<span class="params"><span class="built_in">string</span> hashFormat, <span class="built_in">string</span> srcPath</span>)</span> &#123; &#125; <span class="comment">// RVA: 0x1046E68 Offset: 0x1046E68 VA: 0x1046E68</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是静态分析了：</p><ul><li><strong>GetHashName(string assetBundleName, Hash128 assetBundleHash)</strong>:<br>在manifest里取得assetbundleName、assetbundleHash，将之按照<code>&#123;assetBundleName&#125;+&#123;assetBundleHash&#125;+gpl_ab</code>的格式构造一个字符串(加号也属于字符串而不是拼接)，对该字符串计算sha256即为结果。assetbundleHash保存格式是bytes[16]，需要按照02x格式化并拼接为hex string。</li><li><strong>GetPaddingSize(string assetBundleName, Hash128 assetBundleHash)</strong>:<br>似乎是直接对hash128字符串进行循环求值，结果与一个常数相减。但最后看麻了就用了偷懒的方法：读取整个文件，rfind到最后一个匹配的UnityFS头的位置，seek过去进行读取。可行性与开销分析：文件数量未超过1000、平均大小在1MB，存在可行性。</li><li><strong>GetVideoHashName(string videoPath)</strong>:<br>难点来了。流程是按照hashFormat去把videoPath格式化为一个字符串，计算sha256即为结果。问题在于，hashFormat疑似app初始化时服务器下发、而videoPath在剧情scripts中，也是服务器下发。</li></ul><p>此时遗留问题为，如何简单获取hashFormat与videoPath？猜测的话，由于app初始化了hashFormat作为全局变量，因此所有videoPath都需遵循此格式参与后续计算。考虑到CDN开销，视频文件应当唯一，因此hashFormat应当也是唯一且至少在<strong>一个资源版本期间</strong>不会发生变动。videoPath也有可能是遵循一定的格式，比如<code>&#123;unit_id&#125;_&#123;scene_id&#125;.mp4</code>，混淆前具有易读性更符合开发者的习惯。</p><p>总结一下就是我们直接从内存中扒出这两个变量即可。</p><h2 id="压轴——frida"><a href="#压轴——frida" class="headerlink" title="压轴——frida"></a>压轴——frida</h2><p>秒了<br><img src="/2022/05/07/%E9%80%86%E5%90%91-aria/frida-moviesalt.png" title="frida"></p><p>可以假定videoPath符合这样的格式：<code>ADV/movie_&#123;unit_id&#125;_&#123;scene_id&#125;.mp4</code>，视频有两个就是01与02，角色id根据静态资源来就好了。<br>hashFormat为<code>bless_turn_into_curse_&#123;videoPath&#125;</code>。（有点像寓言里bless不正确使用就会变成curse…不过有没有可能在讽刺搞逆向的¿）</p><p>编写脚本进行测试，结论正确。不过懒得发gist了，代码好丑…不过还是贴一下核心部分。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">INPUT_FORMAT = <span class="string">&#x27;&#123;0&#125;+&#123;1&#125;+gpl_ab&#x27;</span></span><br><span class="line">MP4_INPUT_FORMAT = <span class="string">&#x27;bless_turn_into_curse_&#123;0&#125;&#x27;</span></span><br><span class="line">MP4_1_FORMAT = <span class="string">&#x27;ADV/movie_&#123;0&#125;_01.mp4&#x27;</span></span><br><span class="line">MP4_2_FORMAT = <span class="string">&#x27;ADV/movie_&#123;0&#125;_02.mp4&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GetHashName</span>(<span class="params">abName, abHash128=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    inputStr = INPUT_FORMAT.<span class="built_in">format</span>(abName, abHash128) <span class="keyword">if</span> abHash128 <span class="keyword">else</span> MP4_INPUT_FORMAT.<span class="built_in">format</span>(abName)</span><br><span class="line">    hashRes = hashlib.sha256(inputStr.encode(<span class="string">&#x27;utf-8&#x27;</span>)).digest()</span><br><span class="line">    hashResHexStr = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(x, <span class="string">&#x27;02x&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> hashRes)</span><br><span class="line">    <span class="keyword">return</span> hashResHexStr</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># let UnityPy read unpadded part</span></span><br><span class="line">index = f.read().rfind(<span class="string">b&#x27;UnityFS\x00\x00\x00\x00&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> index != -<span class="number">1</span>:</span><br><span class="line">        f.seek(index)</span><br><span class="line">        env = UnityPy.load(f.read())</span><br></pre></td></tr></table></figure><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>如果hashFormat发生变动了，再走一遍frida即可解决。<br>嗯，就这样。</p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向记录（代号grisen）</title>
      <link href="/2022/05/02/%E9%80%86%E5%90%91-grisen/"/>
      <url>/2022/05/02/%E9%80%86%E5%90%91-grisen/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有朋友拜托我看一下某个四月份的新游戏…</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="小背景"><a href="#小背景" class="headerlink" title="小背景"></a>小背景</h2><p>教程不算长，播教学CG时f12看了眼</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://game.**********.jp/AssetBundles/DmmR18Web/movie/harem/chara0000/be812c6b9482ba61e437eb836d479501a15b1f1c91d0acdda7c80009494d4a89.assetbundle?param=3f0ab091d7acb84ae47f834a6da5ab6d</span><br></pre></td></tr></table></figure><p>很眼熟</p><h2 id="开始研究"><a href="#开始研究" class="headerlink" title="开始研究"></a>开始研究</h2><p>感觉完全就是<a href="../../../../2021/06/04/%E9%80%86%E5%90%91-ayaranbu/">之前某次研究</a>里的<br>下载一份apk看了眼dump.cs，完 全 一 致</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Namespace: App</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AssetBundleDownloadUtility</span> <span class="comment">// TypeDefIndex: 8700</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Fields</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> HASH_SALT; <span class="comment">// 0x0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">int</span> HASH_COUNT; <span class="comment">// 0x8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="comment">// RVA: 0x145B014 Offset: 0x145B014 VA: 0x145B014</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">customizeWebRequest</span>(<span class="params">UnityWebRequest webRequest</span>)</span> &#123; &#125;</span><br><span class="line"><span class="comment">// RVA: 0x145B148 Offset: 0x145B148 VA: 0x145B148</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">makeAssetBundleFileNameHash</span>(<span class="params"><span class="built_in">string</span> assetBundlePath</span>)</span> &#123; &#125;</span><br><span class="line"><span class="comment">// RVA: 0x145B2C0 Offset: 0x145B2C0 VA: 0x145B2C0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> .cctor() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>  不是很需要再导一遍global metadata了，直接看吧<br>  测试代码如下（如果你能猜到是哪个游戏，改一下cdn链直接用吧，懒得传gist）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> UnityPy <span class="comment">#run &#x27;pip install unitypy==1.6.7.2&#x27; first</span></span><br><span class="line"></span><br><span class="line">gurizaia_cdn_header = <span class="string">&#x27;https://game.***********.jp/AssetBundles/DmmR18Web/&#x27;</span></span><br><span class="line"></span><br><span class="line">HASH_SALT = <span class="string">&#x27;riznqfd7sj5rtw8gvfbur4fysdferto834hvfnds8&#x27;</span></span><br><span class="line">HASH_COUNT = <span class="number">11</span></span><br><span class="line">XOR_VAL = <span class="string">b&#x27;\x2C&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeSha256Hash</span>(<span class="params">text, salt = HASH_SALT, loopHashCount = HASH_COUNT</span>):</span></span><br><span class="line">    text_salt = <span class="string">f&#x27;<span class="subst">&#123;text&#125;</span><span class="subst">&#123;salt&#125;</span>&#x27;</span></span><br><span class="line">    b_text_salt = text_salt.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(loopHashCount):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">            b_text_salt = baxor(b_text_salt, XOR_VAL * <span class="built_in">len</span>(b_text_salt))</span><br><span class="line">        b_text_salt = hashlib.sha256(b_text_salt).digest()</span><br><span class="line">    hashRes = res = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(x, <span class="string">&#x27;02x&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> b_text_salt)</span><br><span class="line">    <span class="keyword">return</span> hashRes</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baxor</span>(<span class="params">ba1, ba2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(ba1, ba2))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_filelist</span>(<span class="params">manifest, output</span>):</span></span><br><span class="line">    env = UnityPy.load(manifest)</span><br><span class="line">    <span class="keyword">for</span> o <span class="keyword">in</span> env.objects:</span><br><span class="line">        data = o.read()</span><br><span class="line">        <span class="keyword">if</span> data.name == <span class="string">&#x27;AssetBundleManifest&#x27;</span>:</span><br><span class="line">            parsed_list = []</span><br><span class="line">            <span class="keyword">for</span> key <span class="keyword">in</span> data.type_tree[<span class="string">&#x27;AssetBundleNames&#x27;</span>]:</span><br><span class="line">                parsed_list.append(data.type_tree[<span class="string">&#x27;AssetBundleNames&#x27;</span>][key])</span><br><span class="line">            parsed_list.sort()</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(output, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8-sig&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> p <span class="keyword">in</span> parsed_list:</span><br><span class="line">                    dirname, basename = os.path.split(p)</span><br><span class="line">                    filename, fileext = os.path.splitext(basename)</span><br><span class="line">                    hashname = makeSha256Hash(filename)</span><br><span class="line">                    f.write(<span class="string">f&#x27;<span class="subst">&#123;p&#125;</span>,<span class="subst">&#123;gurizaia_cdn_header&#125;</span><span class="subst">&#123;dirname&#125;</span>/<span class="subst">&#123;hashname&#125;</span><span class="subst">&#123;fileext&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    response = urllib.request.urlopen(<span class="string">f&#x27;<span class="subst">&#123;gurizaia_cdn_header&#125;</span>DmmR18Web&#x27;</span>).read()</span><br><span class="line">    dump_filelist(response, <span class="string">&#x27;manifest.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这也能祖传代码？</p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向记录（代号legeclo）</title>
      <link href="/2021/10/26/%E9%80%86%E5%90%91-legeclo/"/>
      <url>/2021/10/26/%E9%80%86%E5%90%91-legeclo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前事前登录很久的游戏开服了，就上去看了一下。其实挺期待的，因为是我之前博客说的那家厂商的又一个新游~<br>这次的卖点是60帧的动态CG与播片（其实 CG 也是播片，并不是真的在渲染 Spine 动画），值得注意的是用了Criware。<br>所以就简要谈两句，研究时间也没多长，所以肯定不会非常全面。<br>但总体而言还是高估了对手（？</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="小背景"><a href="#小背景" class="headerlink" title="小背景"></a>小背景</h2><p>背景就不多说了，就是上次奋发图强大改assetname的那家。<br>所以这次一定准备了非常强力的加密吧！<br>所以这次一定准备了非常强力的加密吧？（星战meme</p><p>本次目标简简单单，为以下三点：</p><ul><li>获取完整的资源爬取方式</li><li>获取Criware Key</li><li>获取主数据库加密Key</li></ul><h2 id="网页版初探"><a href="#网页版初探" class="headerlink" title="网页版初探"></a>网页版初探</h2><p>网页肯定是wasm，怀念几个cocos2d的厂还能阅读js源码<br>一直提示连接错误，还以为是太火热服务器baozhale，结果是服务器要求东京时区，怒</p><p>游戏开局就能跳所有教程，看CG时可以直接看目标片段（其他游戏里需要至少阅读完毕一次剧情），不得不说用户体验至上<br>很多游戏一上来新手教程直接塞满还不能跳过，被迫看主线，大部分玩家期待的是开局送抽抽卡环节（吧</p><p>在阅读剧情时发现会先下载故事script，从中按需下载CG，url未加密但角色都是代号，又双叒叕不加密。</p><p>主数据库是csv压zip打包，设了密码…？反正我真的是第一次见到，惊呆了<br><img src="/2021/10/26/%E9%80%86%E5%90%91-legeclo/deczip.png" title="zip"></p><p>此外还有一个经典manifest，不包括cg的样子。但你可以从里面Spine小人的数据特征（*.atlas.txt）反推角色代号，按照URL格式就可以爬到所有CG，目标一完成<br>试着写了一个结果真就全弄下来了。那么还有什么继续的必要吗（？</p><p>然后usm视频文件扔到播放器里居然直接播了，都不需要 Criware Key…目标三完成。<br>看看压缩包密码吧。</p><h2 id="IDA打头阵"><a href="#IDA打头阵" class="headerlink" title="IDA打头阵"></a>IDA打头阵</h2><p>好像出了点问题，静态分析没处理好struct，跳了几步看得头晕，摸了罢。</p><h2 id="Frida-Hook"><a href="#Frida-Hook" class="headerlink" title="Frida Hook"></a>Frida Hook</h2><p>秒了<br><img src="/2021/10/26/%E9%80%86%E5%90%91-legeclo/frida.png" title="frida"></p><p>稍微读了一下包里的主数据库，可以用来获取全角色代号（但没必要），不过里面有未实装圣诞角色还是蛮有趣的。</p><h2 id="官方嘲讽"><a href="#官方嘲讽" class="headerlink" title="官方嘲讽"></a>官方嘲讽</h2><p>安卓版安装完毕了，右上角怎么有个下载全部数据按钮..？<br>跑到应用目录下怎么所有CG都在？<br>WTF</p><p>好像完全没学到什么，不过CG还是很好看<br>唉</p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/2021/09/20/%E6%9D%82%E8%AE%B0/"/>
      <url>/2021/09/20/%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="c610510d1b35c848acd4847b5005fbf047a9bb458b09bff118de28b7d3674fa4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请使用杂货间钥匙</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逆向记录（代号ayaranbu）</title>
      <link href="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/"/>
      <url>/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这段时间真是忙的要死，摸了 20 天<del>爽到</del><br>不过晚上还是一有时间就去打魂 2 的白金，不得不说这一作还是最耐玩的，即使是高周目也有很强的可玩性，尤其是 3 个极为优秀的 DLC。</p><p>回到正题，主要是之前的爬取某 DMM 页游<del>H</del>CG 的脚本突然崩了，今天花了一些时间研究了改动并重写了脚本，简单记录一下过程。</p><span id="more"></span><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="小背景"><a href="#小背景" class="headerlink" title="小背景"></a>小背景</h2><p>厂商的名字以及游戏名字暂且不表，主要是我和这个厂商蛮有缘分的…所以尽管这次研究也没什么困难，我还是稍微记录一下好了。</p><p>它上一款已经关服的游戏，是我大学接触游戏解包与逆向的契机。它带有动态CG，质量相当不错，但优化不得不说真的拉，打副本闪退可谓是家常便饭。试想想你打最高难度团灭，恰了抽卡用货币复活结果闪退了货币还消耗了不给返还，用户体验可以说是非常糟糕。所以我每次更新都在某e站对应的画廊等大佬更新gif。但是好景不长，大佬唐突弃坑跑路了，当时正好出了自认为不错的新角色，只能极不情愿地打开这个游戏去抽，理所当然地没抽到。抱着试试的心态，我按了f12去查看已有角色的CG，结果发现资源URL是全明文而且没有任何防爬的验证措施，这样的话，我只要知道了动画资源文件的 URL pattern，在指定范围内构造一系列的 URL，访问返回200的话就保存下来应该就可以拉取到所有CG了。很稚嫩的思路，but it works. 当时正好学了一天的 Python，就按照以上的思路写了上古版本的资源爬取代码。<br>下载下来的数据是unity的assetbundle，接着又去了解了unity相关的知识，最后解开发现是将mp4的二进制数据当做TextAsset封入assetbundle。</p><p>在游戏中从静态过渡到动态时会卡一下，大概就是加载视频文件的开销吧…现在大厂一般会使用Criware这个强大的音视频中间件。<br>↓ 凭借着下图这个脚本（初版），我在那个画廊评论区以 mega 链接的形式更新剩余的 mp4 文件，更了很久直到关服。</p><p><img src="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/01.png" title="初代目代码"></p><p>期间对脚本进行了小幅度改进，会记录已经保存的角色 id 到 csv 文件，下次遍历的时候就跳过。<br>穷举id会不可避免地触发403&#x2F;404，可能会导致厂商检查服务器log时注意到。</p><p>然后关服后这公司推出了新的页游，资源存储方式与这个一模一样…老的脚本直接改一下 cdn 链接就能继续上岗了，就这样继续用了一年半。<br>顺便一提游戏优化真的一言难尽，和前作一样卡得要死，祖传框架？</p><p>不久后的一次更新后（就在前几天），脚本跑了根本就没动静，一看 log 返回的全是 404，心想着可能还在维护服务器，就等到晚上再跑了一遍，还是 404。<br>进游戏一看没有在维护，爬下 manifest 文件表一看文件确实有。开了个角色剧情抓包一看，惊了，是一长串的hash。<br>↓f12</p><p><img src="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/02.png" title="f12"></p><h2 id="开始研究（战况分析）"><a href="#开始研究（战况分析）" class="headerlink" title="开始研究（战况分析）"></a>开始研究（战况分析）</h2><p>一般而言此类加密一般走一下逆向静态分析基本能解决问题，但是太费时间不如frida直接hook。但对于我这种游戏都懒得下载打开安卓版的人来讲，我会选择前者。毕竟不注重资源防护的话，lib一般也不会混淆。</p><p>但在这之前，先分析一下 url 格式：<br><code>https://***.******.com/AssetBundles/DmmR18Web/ui/73285980484e56353254c0089894d7c46b218a8f7d0fc87652eaf93cb16c7589.assetbundle</code><br>在manifest中文件名依然是明文，而请求URL是一串巨长的字符，通常是做了<code>filename-&gt;obscured filename</code>的映射处理。可能是对文件名做了一系列的变换（比如 hash），至于如何做的hash，那就需要静态分析了。</p><p>从安卓端掏出lib和metadata，处理一下丢进ida。趁着ida在跑边翻<code>dump.cs</code>边思考一下变换函数的位置。</p><p>这个时候一般是从发送下载请求的函数入手，从关键字可以检索到<code>AssetBundleDownloadUtility</code>类，简单扫一下结构，确实正好是我们要找的。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Namespace: App</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AssetBundleDownloadUtility</span> <span class="comment">// TypeDefIndex: 8847</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Fields</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">string</span> HASH_SALT; <span class="comment">// 0x0</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">int</span> HASH_COUNT; <span class="comment">// 0x8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">customizeWebRequest</span>(<span class="params">UnityWebRequest webRequest</span>)</span>; <span class="comment">// RVA: 0x26B8EA4 Offset: 0x26B8EA4</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">makeAssetBundleFileNameHash</span>(<span class="params"><span class="built_in">string</span> assetBundlePath</span>)</span>; <span class="comment">// RVA: 0x26B8FC8 Offset: 0x26B8FC8</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> .cctor(); <span class="comment">// RVA: 0x26B9040 Offset: 0x26B9040</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员变量暗示可能对文件名进行了加盐操作，以及循环计算了一定次数的hash，目标函数应该为<code>makeAssetBundleFileNameHash</code>。至此准备工作完成。</p><h2 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h2><p>↓ 打开<code>AssetBundleDownloadUtility</code>类，此类静态变量一般会在ctor或者cctor等constructor中进行值的初始化。<br><img src="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/03.png" title="constructor"><br>循环次数设为了 14，根据<code>StringLiteral_6415</code>对应的字符串我们也拿到了salt。<br>然后分析目标函数：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Namespace: GameFrame</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">AssetBundleUtility</span> <span class="comment">// TypeDefIndex: 5240</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Methods</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">makeHashAssetBundleFilePath</span>(<span class="params"><span class="built_in">string</span> assetBundlePath, <span class="built_in">string</span> salt, optional <span class="built_in">int</span> loopHashCount</span>)</span>; <span class="comment">// RVA: 0x183DC14 Offset: 0x183DC14</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/04.png" title="makeHashAssetBundleFilePath"><br>↑ 图中给临时变量进行更名操作方便分析，画圈处为关键代码，即将URL中文件名主体（不含目录以及后缀）替换为<code>makeSha256Hash</code>返回的值，其中该函数的输入为文件名主体、循环次数以及盐。<br><img src="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/05.png" title="makeSha256Hash 01"><br>↑ 如上图，清晰的do-while循环。（<code>_ts</code>是 text 和 salt 拼接后的字符串，在上面没有截到。）</p><ul><li>A 区域表示在第一次循环之后，对该字符串的每个 byte 与<code>0x2C</code>相异或。</li><li>B 区域对处理后的字符串计算 sha256。</li><li>执行顺序显然是 sha256-&gt;异或-&gt;sha256…异或-&gt;sha256<br><img src="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/06.png" title="makeSha256Hash 02"><br>↑ 接下来就很简单了，<code>StringLiteral_2016</code>对应的字符串是<code>x2</code>，联想 url 的结构，以及 C#格式化字符串的参数，就是将最终的 bytearray 转为 Hex string。<br>分析完毕，测试代码如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># App.AssetBundleDownloadUtility$$.cctor</span></span><br><span class="line">HASH_SALT = <span class="string">&#x27;******************************&#x27;</span><span class="comment"># private</span></span><br><span class="line">HASH_COUNT = <span class="number">14</span></span><br><span class="line">XOR_VAL = <span class="string">b&#x27;\x2C&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># GameFrame.HashUtility$$makeSha256Hash</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeSha256Hash</span>(<span class="params">text, salt = HASH_SALT, loopHashCount = HASH_COUNT</span>):</span></span><br><span class="line">    text_salt = <span class="string">f&#x27;<span class="subst">&#123;text&#125;</span><span class="subst">&#123;salt&#125;</span>&#x27;</span></span><br><span class="line">    b_text_salt = text_salt.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(loopHashCount):</span><br><span class="line">        <span class="keyword">if</span> i &gt;= <span class="number">1</span>:</span><br><span class="line">            b_text_salt = baxor(b_text_salt, XOR_VAL * <span class="built_in">len</span>(b_text_salt))</span><br><span class="line">        b_text_salt = hashlib.sha256(b_text_salt).digest()<span class="comment"># not hexdigest()</span></span><br><span class="line">    hashRes = res = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">format</span>(x, <span class="string">&#x27;02x&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> b_text_salt)</span><br><span class="line">    <span class="built_in">print</span>(hashRes)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">baxor</span>(<span class="params">ba1, ba2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(a ^ b <span class="keyword">for</span> a,b <span class="keyword">in</span> <span class="built_in">zip</span>(ba1, ba2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    makeSha256Hash(<span class="string">&#x27;movie0188_scene01.mp4&#x27;</span>)</span><br><span class="line">    <span class="comment"># output: fffefb316d21387f88fc4de22e164ec3bb461b8f1af2a0da9faff190f6d81cc3</span></span><br></pre></td></tr></table></figure><p>↓ 与实际结果测试，结果无误，问题解决。<br><img src="/2021/06/04/%E9%80%86%E5%90%91-ayaranbu/07.png" title="f12 confirmed"><br>然后顺便写了一份根据文件表，仅下载更新档的脚本，完全自动化了繁琐的操作。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>frida动态插桩可以更快地找到salt和循环次数，但是其过程不方便还原。实际上很多游戏的加密方法非常繁琐，动态调试完全是更优秀的方法。<br>总体感觉很适合新人静态分析入门）</p>]]></content>
      
      
      <categories>
          
          <category> Hacking </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梦记录</title>
      <link href="/2021/05/16/%E6%A2%A6%E8%AE%B0%E5%BD%95/"/>
      <url>/2021/05/16/%E6%A2%A6%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="89364756b6e2e8e05043c210988e8caf40d423fcaea426a6e689a723ee53b28e"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请使用梦之钉</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前言</title>
      <link href="/2000/02/29/%E5%89%8D%E8%A8%80/"/>
      <url>/2000/02/29/%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h1 id="开幕碎碎念"><a href="#开幕碎碎念" class="headerlink" title="开幕碎碎念"></a>开幕碎碎念</h1><p>终于还是开了个博客</p><p>18-19年期间写过一些东西，发表在了朋友搭的blog上<del>然后朋友沉迷地球OL导致一个月忘了续费，服务器直接升天</del>，体验极差，所幸自己有保留word版。今天整理收藏夹看到了已经失效的博客链接，就干脆嫖github的好了，以后想写点什么东西的话可以玩玩。</p><p>至于要写什么东西，还没有什么头绪，兴致来了就写。生活、工作、娱乐可能都会写一写<del>反正没人看</del>。</p><span id="more"></span><h1 id="小小的规划（不保证时效性）"><a href="#小小的规划（不保证时效性）" class="headerlink" title="小小的规划（不保证时效性）"></a>小小的规划（不保证时效性）</h1><ul><li><strong>网站风格</strong>：目前是next的默认主题，体验就是中规中矩的性冷淡风格，打算改一下。虽然比较喜欢这种风格，但说实话有点烂大街了…字体也准备改一下，思源黑体体验还不错，不会犯错的保守字体。</li><li><strong>功能</strong>：还没想好，好像也没什么要加的，md阅读器就要有阅读器的亚子，专一点最好。</li><li><strong>其他</strong>：github pages速度挺捉急的，但我实在是懒得同步一份gitee（哪怕是写脚本），自用应该问题不大，摸。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前言 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
